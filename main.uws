CALL ChkImgX.uws

CONST DEBUG_FAILE_NUM =　20 //正常系処理で使用するデバッグ用のエラー判定定数
CONST DEBUG_FAILE_NUM_IN_RETURN_PROCESS = 20 //復帰処理で使用するデバッグ用のエラー判定定数

CONST CHKIMGX_INTERVAL_TIME_SEC = 10 //1回目の画像認識で見つからなかった場合での次の画像認識までのinterval時間[sec]

DIM CNT = INPUT("周回数を入力してください")

DIM WIN_ID = GETID("NoxPlayer", "Qt5QWindowIcon")
DIM WIN_X = STATUS(WIN_ID, ST_X)
DIM WIN_Y = STATUS(WIN_ID, ST_Y)
DIM WIN_W = STATUS(WIN_ID, ST_WIDTH)
DIM WIN_H = STATUS(WIN_ID, ST_HEIGHT)

//使う画像のパスを処理の順番に並べている
DIM IMG_PATH[] = "start_stage.png", "sortie_button1.png", "sortie_button2.png", "enemy.png", "result.png", "get_item.png", "confirm_button1.png", "boss.png", "result.png", "get_item.png", "confirm_button1.png"
DIM DIALOG_IMG_PATH[] = "conform2.png"
DIM RETURNED_IMG_PATH[] = "doing.png"
INIT_IMG_PATH(IMG_PATH)
INIT_IMG_PATH(DIALOG_IMG_PATH)
INIT_IMG_PATH(RETURNED_IMG_PATH)

DIM IS_TIRED = FALSE
DIM IS_ERROR = FALSE
DIM IS_RETURNED = FALSE
DIM NOW_PROCESS_NUM = 0 //エラー発生時に復帰する処理を保持する変数

//ログファイルの準備
GETTIME()
DIM LOG_DIR_PATH = "../log_dir/"

FOR LOG_FILE_NUM = 1 TO 100
    DIM LOG_FILE_NAME = LOG_DIR_PATH + "log_"+G_TIME_YY + G_TIME_MM + G_TIME_DD +"_"+LOG_FILE_NUM+".txt"
    IFB !FOPEN(LOG_FILE_NAME, F_EXISTS)
        //ファイル作成
        DOSCMD("echo >"+LOG_FILE_NAME)
        BREAK
    ENDIF
NEXT

DIM FILE_ID = FOPEN(LOG_FILE_NAME,F_WRITE);

REPEAT
    FOR I=1 TO CNT
        DIM MSG = I + "週目開始"
        PRINT MSG
        FPUT(FILE_ID,MSG)

        FOR PROCESS_NUM = NOW_PROCESS_NUM TO LENGTH(IMG_PATH) - 1
            
            MSG = I + "週目：" + PROCESS_NUM + "/" + VARTYPE(LENGTH(IMG_PATH) - 1 ,8) +"番目の処理を開始"
            PRINT  MSG
            FPUT(FILE_ID,MSG)
        
            DIM FAIL_CNT = 0
            REPEAT
                IFB FAIL_CNT > DEBUG_FAILE_NUM 
                    MSG = "エラー発生"
                    PRINT MSG
                    FPUT(FILE_ID,MSG)

                    IFB PROCESS_NUM = 2
                        NOW_PROCESS_NUM = 0
                    ELSE
                        NOW_PROCESS_NUM = PROCESS_NUM
                    ENDIF

                    IS_ERROR = TRUE
                    BREAK 3
                ENDIF

                IFB IS_RETURNED
                    IFB MY_CHKIMGX(RETURNED_IMG_PATH[0], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)
                        BTN(LEFT, CLICK, G_IMGX_X, G_IMGX_Y)
                        SLEEP(1)
                        IS_RETURNED = FALSE
                    ENDIF
                ENDIF

                IFB IS_TIRED
                    IFB MY_CHKIMGX(DIALOG_IMG_PATH[0], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)
                        BTN(LEFT, CLICK, G_IMGX_X, G_IMGX_Y)
                        SLEEP(1)
                    ENDIF
                ENDIF
                DIM IS_IMG = MY_CHKIMGX(IMG_PATH[PROCESS_NUM], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)

                IF FAIL_CNT > 0 THEN SLEEP(CHKIMGX_INTERVAL_TIME_SEC)
            
                FAIL_CNT = FAIL_CNT + 1
            UNTIL IS_IMG

            DO_PROCESS(PROCESS_NUM)

            MSG = I + "週目：" + PROCESS_NUM +  "/" + VARTYPE(LENGTH(IMG_PATH) - 1 ,8) + "番目の処理を終了"
            NOW_PROCESS_NUM = PROCESS_NUM
            PRINT MSG
            FPUT(FILE_ID,MSG);
        NEXT

        MSG = I + "週目終了"
        PRINT MSG
        FPUT(FILE_ID,MSG)

        NOW_PROCESS_NUM = 0
    NEXT

    //エラー発生時の復帰処理
    IFB IS_ERROR
        MSG = "復帰処理開始"
        PRINT MSG
        FPUT(FILE_ID,MSG)
        IFB RETURN_PROCESS(WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H, FILE_ID, IS_TIRED)
            IS_ERROR = FALSE
            IS_RETURNED = TRUE
            MSG = "復帰処理成功"
        ELSE
            MSG = "復帰処理失敗"
        ENDIF
        PRINT MSG
        FPUT(FILE_ID,MSG)
    ENDIF
UNTIL IS_ERROR

IFB !IS_ERROR 
     MSGBOX("処理完了")
     FPUT(FILE_ID,"処理完了")
ELSE
     MSGBOX("処理失敗")
     FPUT(FILE_ID,"処理失敗")
ENDIF

FCLOSE(FILE_ID);
////////////// ここまでメイン処理 ////////////////////////
/////////////////////////////////////////////////////////


//処理
PROCEDURE DO_PROCESS(P_NUM)
    DIM OFFSET =10

    BTN(LEFT,CLICK,G_IMGX_X + OFFSET,G_IMGX_Y + OFFSET)
    IFB P_NUM = 2 OR P_NUM = 6
        SLEEP(8)
    ELSEIF P_NUM = 3 
        SLEEP(15)
    ELSE 
        SLEEP(1)
    ENDIF
FEND

//ドックの上限を解消するのはまだ実装完了していない
//エラー発生時の復帰処理
FUNCTION RETURN_PROCESS(WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H, FILE_ID, IS_TIRED)//FILEIDはデバッグログにつかう

    //エラー発生時の復帰処理に使う画像
    PRINT "in RETURN_PROCESS"
    FPUT(FILE_ID,"in RETURN_PROCESS")

    DIM REBOOT_ERROR_IMG_PATH[] = "title_page.png", "title_page.png", "sortie_button_on_menu.png"
    DIM DELETE_PROCESS_IMG_PATH[] = "filter.png", "nomal.png", "conform2.png", "conform2.png","conform2.png", "get_item.png", "conform2.png", "conform2.png","get_item.png", "filter.png", "nomal.png", "conform2.png","return_screen_button.png"
    DIM DELETE_TARGET_IMG_PATH[] =  "cygnet.png", "comet.png", "craven.png", "mccool.png","crescent.png"
    INIT_IMG_PATH(REBOOT_ERROR_IMG_PATH)
    INIT_IMG_PATH(DELETE_PROCESS_IMG_PATH)
    INIT_IMG_PATH(DELETE_TARGET_IMG_PATH) 

    IFB IS_TIRED(WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H ,FILE_ID)
        IS_TIRED = TRUE
    //ドックが上限に達したとき
    ELSEIF IS_FULL(WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H,FILE_ID)
        //いらないものを削除していく処理
        PRINT "ドック上限到達"
        FPUT(FILE_ID,"ドック上限到達")
        IFB !RETURN_PROCESS_BY_DELETEING(DELETE_PROCESS_IMG_PATH,DELETE_TARGET_IMG_PATH, WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H,FILE_ID)
            RESULT = FALSE
            EXIT
        ENDIF
    //アプリが落ちて再起動したとき
    ELSEIF !RETURN_PROCESS_FROM_REBOOT(REBOOT_ERROR_IMG_PATH, WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H)
        RESULT = FALSE
        EXIT
    ENDIF

    RESULT = TRUE
FEND

FUNCTION IS_TIRED(WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H,FILE_ID)
    DIM IMG_PATH[] = "conform2.png"
    INIT_IMG_PATH(IMG_PATH)
    RESULT = FALSE
    IFB MY_CHKIMGX(IMG_PATH[0], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)
        RESULT = TRUE
    ENDIF
FEND

//ドックが一杯になったダイアログが表示されているかどうか
FUNCTION IS_FULL(WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H,FILE_ID)
    PRINT "in IS_FULL"
    FPUT(FILE_ID,"in IS_FULL")
    DIM IMG_PATH[] = "organize.png"
    INIT_IMG_PATH(IMG_PATH)
    RESULT = FALSE
    IFB MY_CHKIMGX(IMG_PATH[0], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)
        BTN(LEFT,CLICK,G_IMGX_X,G_IMGX_Y)
        RESULT = TRUE
    ENDIF
FEND

//かんせんを削除してドックの中を開けていく処理
FUNCTION RETURN_PROCESS_BY_DELETEING(ERROR_IMG_PATH[], DELETE_TARGET_IMG_PATH[], WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H, FILE_ID)
    PRINT "in RETURN_PROCESS_BY_DELETING"
    FPUT(FILE_ID,"in RETURN_PROCESS_PROCESS_BY_DELETING")

    FOR PROCESS_NUM = 0 TO LENGTH(ERROR_IMG_PATH) - 1
        PRINT ERROR_IMG_PATH[PROCESS_NUM]
        FPUT(FILE_ID, ERROR_IMG_PATH[PROCESS_NUM])

        DIM FAIL_CNT = 0
        REPEAT
            IFB FAIL_CNT > DEBUG_FAILE_NUM_IN_RETURN_PROCESS 
                RESULT = FALSE
                EXIT
            ENDIF

            //削除するものを選んでいく
            IFB PROCESS_NUM = 3
                DELETE_TARGET(DELETE_TARGET_IMG_PATH, WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H, FILE_ID)
            ENDIF
            DIM IS_IMG = MY_CHKIMGX(ERROR_IMG_PATH[PROCESS_NUM], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)

            IF FAIL_CNT > 0 THEN SLEEP(CHKIMGX_INTERVAL_TIME_SEC)
            
            FAIL_CNT = FAIL_CNT + 1
        UNTIL IS_IMG

        BTN(LEFT, CLICK, G_IMGX_X, G_IMGX_Y)
        SLEEP(5)
    NEXT

    RESULT = TRUE
FEND

PROCEDURE DELETE_TARGET(DELETE_TARGET_IMG_PATH[], WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H, FILE_ID)
    FOR PROCESS_NUM = 0 TO LENGTH(DELETE_TARGET_IMG_PATH) - 1
        PRINT DELETE_TARGET_IMG_PATH[PROCESS_NUM]
        FPUT(FILE_ID, DELETE_TARGET_IMG_PATH[PROCESS_NUM])
        REPEAT
            DIM IS_IMG = MY_CHKIMGX(DELETE_TARGET_IMG_PATH[PROCESS_NUM], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)
            BTN(LEFT, CLICK, G_IMGX_X, G_IMGX_Y)
            SLEEP(1)
        UNTIL !IS_IMG
    NEXT
FEND



//座標は左上と右下
FUNCTION RETURN_PROCESS_FROM_FULL_DOCK(ERROR_IMG_PATH[], WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H,FILE_ID)
    //適当なかんせんをきめとく
    //画面を開いたときに画面に移るようにしとく
    //選択して、おすすめボタンで強化を
    //強化素材の枠が18検知されるまで続ける

    //処理の高速化のため、強化素材を選ぶ枠の座標をあらかじめ取得しておく
    DIM MATERIAL_FORM_X = 0
    DIM MATERIAL_FORM_Y = 0
    DIM MATERIAL_FORM_IMG_PATH[] = "empty_button.png"
    INIT_IMG_PATH(MATERIAL_FORM_IMG_PATH)
    IFB MY_CHKIMGX(MATERIAL_FORM_IMG_PATH[0], WIN_ID, (WIN_X + WIN_W) / 2, (WIN_Y + WIN_H) / 2, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)
        MATERIAL_FORM_X = G_IMGX_X
        MATERIAL_FORM_Y = G_IMGX_Y
        PRINT "強化可能チェック"
        FPUT(FILE_ID,"強化可能チェック")
    ELSE
        RESULT = FALSE
        EXIT
    ENDIF
    
    //復帰処理開始
    REPEAT
        FOR PROCESS_NUM = 0 TO LENGTH(ERROR_IMG_PATH) - 1
            DIM FAIL_CNT = 0
            REPEAT
                IFB FAIL_CNT > DEBUG_FAILE_NUM_IN_RETURN_PROCESS 
                    PRINT "復帰処理時エラー"
                    FPUT(FILE_ID,"復帰処理時エラー")
                    RESULT = FALSE
                    EXIT
                ENDIF

                DIM IS_IMG = MY_CHKIMGX(ERROR_IMG_PATH[PROCESS_NUM], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)

                IF FAIL_CNT > 0 THEN SLEEP(CHKIMGX_INTERVAL_TIME_SEC)
            
                FAIL_CNT = FAIL_CNT + 1
            UNTIL IS_IMG

            //ここらへんでクリックやら
            PRINT "復帰処理動作"+PROCESS_NUM
            FPUT(FILE_ID,"復帰処理動作"+PROCESS_NUM)
        NEXT
    //強化素材の枠がすべてからなら終了
    UNTIL IS_EMPTY_IN_MATERIAL_FORM(WIN_ID, MATERIAL_FORM_X ,MATERIAL_FORM_Y, WIN_W / 2, WIN_H/ 2)

    //戻るボタンを押してもどる
    //復帰前の画面から処理を再開する
    PRINT "戻るボタン処理"
    FPUT(FILE_ID,"戻るボタン処理")

    RESULT = TRUE
FEND

//強化素材の枠がすべて空いているかどうか
FUNCTION IS_EMPTY_IN_MATERIAL_FORM(WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H)
    DIM IMG_PATH[] ="empty_button.png"
    INIT_IMG_PATH(IMG_PATH)
    RESULT = TRUE
    IFB MY_CHKIMGX(IMG_PATH[0], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, -1, 5, -1) < 18
        RESULT = FALSE
    ENDIF
FEND

//アプリが落ちたときの復帰処理
FUNCTION RETURN_PROCESS_FROM_REBOOT(ERROR_IMG_PATH[], WIN_ID, WIN_X, WIN_Y, WIN_W, WIN_H)
    FOR PROCESS_NUM = 0 TO LENGTH(ERROR_IMG_PATH) - 1
        
            DIM FAIL_CNT = 0
            REPEAT
                IFB FAIL_CNT > 20 
                    RESULT = FALSE
                    EXIT
                ENDIF

                DIM IS_IMG = MY_CHKIMGX(ERROR_IMG_PATH[PROCESS_NUM], WIN_ID, WIN_X, WIN_Y, WIN_X + WIN_W, WIN_Y + WIN_H, 1, 5, -1)

                IF FAIL_CNT > 0 THEN SLEEP(CHKIMGX_INTERVAL_TIME_SEC)
            
                FAIL_CNT = FAIL_CNT + 1
            UNTIL IS_IMG

            //ここらへんでクリックやら
    NEXT

    RESULT = TRUE
FEND

//画像認識
//座標は左上と右下
FUNCTION MY_CHKIMGX(IMG_PATH,ID,X1,Y1,X2,Y2,NUM,THRESHOLD,TARGET_COLOR)
    startup_chkimgx() //CHKIMGX関数開始
    DIM IS_IMG = CHKIMGX(IMG_PATH, ID,  X1, Y1, X2, Y2, NUM, THRESHOLD, TARGET_COLOR)
    shutdown_chkimgx() //CHKIMGX関数停止
    RESULT = IS_IMG
FEND

PROCEDURE INIT_IMG_PATH(VAR IMG_PATH[])
    CONST DIR_PATH="../../img/Azur Lane/"
    FOR I = 0 TO LENGTH(IMG_PATH) -1 
        IMG_PATH[I]= DIR_PATH + IMG_PATH[I]
    NEXT
FEND